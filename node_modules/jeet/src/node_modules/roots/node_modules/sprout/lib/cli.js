// Generated by CoffeeScript 1.7.0
(function() {
  var ArgParse, CLI, EventEmitter, W, path, pkg;

  require('colors');

  W = require('when');

  path = require('path');

  pkg = require('../package.json');

  ArgParse = require('argparse').ArgumentParser;

  EventEmitter = require('events').EventEmitter;


  /**
   * @class  CLI
   * @classdesc command line interface to sprout
   */

  CLI = (function() {

    /**
     * Creates and sets up the argument parser, makes the event emitter through
     * which it returns all information publicy available.
     *
     * @param {Boolean} debug - if debug is true, arg parse errors throw rather
     *                          than exiting the process.
     */
    var $add, $init, $list, $remove;

    function CLI(opts) {
      var sub;
      if (opts == null) {
        opts = {};
      }
      this.emitter = new EventEmitter;
      this.parser = new ArgParse({
        version: pkg.version,
        description: pkg.description,
        debug: opts.debug || false
      });
      sub = this.parser.addSubparsers();
      $add(sub);
      $remove(sub);
      $list(sub);
      $init(sub);
    }


    /**
     * Parses the arguments, runs the command
     * 
     * @param {String|Array} args - a string or array of command line arguments
     * @return {Promise} a promise for the command's results
     */

    CLI.prototype.run = function(args) {
      var e, fn;
      if (typeof args === 'string') {
        args = args.split(' ');
      }
      args = this.parser.parseArgs(args);
      fn = require('./' + path.join('api/', args.fn));
      e = this.emitter;
      return W.resolve(fn(args)).then((function(data) {
        e.emit('data', data);
        return data;
      }), (function(err) {
        e.emit('err', err);
        throw err;
      }));
    };


    /**
     * @private
     */

    $add = function(sub) {
      var s;
      s = sub.addParser('add', {
        aliases: ['install'],
        help: 'Add a new template to sprout'
      });
      s.addArgument(['name'], {
        help: 'Name of the template you want to add'
      });
      s.addArgument(['uri'], {
        nargs: '?',
        help: 'A `git clone`-able url or local path to your template'
      });
      return s.setDefaults({
        fn: 'add'
      });
    };

    $remove = function(sub) {
      var s;
      s = sub.addParser('remove', {
        aliases: ['delete', 'rm'],
        help: 'Remove a template from sprout'
      });
      s.addArgument(['name'], {
        help: 'Name of the template you want to remove'
      });
      return s.setDefaults({
        fn: 'remove'
      });
    };

    $list = function(sub) {
      var s;
      s = sub.addParser('list', {
        aliases: ['ls', 'all'],
        help: 'List all installed sprout templates'
      });
      return s.setDefaults({
        fn: 'list',
        pretty: true
      });
    };

    $init = function(sub) {
      var s;
      s = sub.addParser('init', {
        aliases: ['new'],
        help: 'Create a new sprout project from a template'
      });
      s.addArgument(['name'], {
        help: 'Name of the template you want to use'
      });
      s.addArgument(['path'], {
        nargs: '?',
        "default": process.cwd(),
        help: 'Path where you want to create your project'
      });
      s.addArgument(['--overrides', '-o'], {
        nargs: '*',
        help: 'Space-separated override key-value pairs to be passed to the template'
      });
      s.addArgument(['--defaults', '-d'], {
        nargs: '*',
        help: 'Space-separated default key-value pairs to be passed to the template'
      });
      return s.setDefaults({
        fn: 'init'
      });
    };

    return CLI;

  })();

  module.exports = CLI;

}).call(this);
