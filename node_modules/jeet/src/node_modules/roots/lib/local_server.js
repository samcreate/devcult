// Generated by CoffeeScript 1.7.0
(function() {
  var Server, WebSocket, connect, http, infestor, nodefn, path, util;

  path = require('path');

  nodefn = require('when/node');

  http = require('http');

  connect = require('connect');

  infestor = require('infestor');

  util = require('util');

  WebSocket = require('faye-websocket');


  /**
   * @class Server
   * @classdesc Serves up a roots project locally, handles live reloading
   * @todo investigate superstatic
   */

  Server = (function() {

    /**
     * Creates a new instance of the server
     * 
     * @param  {Function} roots - roots class instance
     * @param  {String} dir - directory to server
     */
    var initialize_websockets, inject_development_js;

    function Server(roots, dir) {
      this.roots = roots;
      this.dir = dir;
    }


    /**
     * Stores all the sockets being used for pushing reloads
     * @type {Array}
     */

    Server.prototype.sockets = [];


    /**
     * Start the local server on the given port.
     * 
     * @param  {Integer} port - number of port to start the server on
     * @return {Promise} promise for the server object
     */

    Server.prototype.start = function(port) {
      var app;
      app = connect();
      if (this.roots.config.env === 'development') {
        inject_development_js.call(this, app);
      }
      app.use(connect["static"](this.roots.config.output_path()));
      this.server = http.createServer(app);
      if (this.roots.config.env === 'development') {
        initialize_websockets.call(this);
      }
      return nodefn.call(this.server.listen.bind(this.server), port)["yield"](this.server);
    };


    /**
     * Close the server and remove it.
     */

    Server.prototype.close = function() {
      this.server.close();
      return delete this.server;
    };


    /**
     * Send a message through websockets to the browser.
     * 
     * @param  {String} k - message key
     * @param  {???} v - message value
     */

    Server.prototype.send_msg = function(k, v) {
      var sock, _i, _len, _ref, _results;
      _ref = this.sockets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sock = _ref[_i];
        _results.push(sock.send(JSON.stringify({
          type: k,
          data: v
        })));
      }
      return _results;
    };


    /**
     * These three methods send 'reload', 'compiling', and 'error' messages through
     * to the browser.
     */

    Server.prototype.reload = function() {
      return this.send_msg('reload');
    };

    Server.prototype.compiling = function() {
      return this.send_msg('compiling');
    };

    Server.prototype.show_error = function(err) {
      return this.send_msg('error', err);
    };


    /**
     * Given a connect app, adds middleware which injects a snippet to add
     * roots' development js, which connectes up to the socket and handles browser
     * reload and compiling events.
     * 
     * @param  {Function} app - connect app instance
     */

    inject_development_js = function(app) {
      app.use(infestor({
        content: "<!-- roots development configuration --> <script>var __livereload = " + this.roots.config.live_reload + ";</script> <script src='__roots__/main.js'></script>"
      }));
      return app.use('/__roots__', connect["static"](path.resolve(__dirname, 'browser')));
    };


    /**
     * Initializes websockets on the server instance.
     */

    initialize_websockets = function() {
      return this.server.on('upgrade', (function(_this) {
        return function(req, socket, body) {
          var ws;
          if (WebSocket.isWebSocket(req)) {
            ws = new WebSocket(req, socket, body);
            return ws.on('open', function() {
              return _this.sockets.push(ws);
            });
          }
        };
      })(this));
    };

    return Server;

  })();

  module.exports = Server;

}).call(this);
