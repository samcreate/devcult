// Generated by CoffeeScript 1.7.0
(function() {
  var Compile, Config, EventEmitter, Extensions, Roots, Watch, fs, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require('colors');

  EventEmitter = require('events').EventEmitter;

  fs = require('fs');

  Config = require('./config');

  Extensions = require('./extensions');

  util = require('util');

  Compile = require('./api/compile');

  Watch = require('./api/watch');


  /**
   * @class
   * @classdesc main roots class, public api for roots
   */

  Roots = (function(_super) {
    __extends(Roots, _super);


    /**
     * Given a path to a project, set up the configuration and return a roots instance
     * @param  {[type]} root - path to a folder
     * @return {Function} - instance of the Roots class
     */

    function Roots(root, opts) {
      this.root = root;
      if (opts == null) {
        opts = {};
      }
      if (!fs.existsSync(this.root)) {
        throw new Error("path does not exist");
      }
      this.extensions = new Extensions(this);
      this.config = new Config(this, opts);
    }


    /**
     * Alternate constructor, creates a new roots project in a given folder and
     * returns a roots instance for this project. Takes an object with these keys:
     *
     * path: path to the folder you'd like to create and initialize a project in
     * template: name of the template you'd like to use (default: base)
     * options: additional options to pass to sprout
     * 
     * @param  {Object} opts - options object, described above
     * @return {Function} Roots class instance
     */

    Roots["new"] = function(opts) {
      var n;
      n = new (require('./api/new'))(this);
      n.exec(opts).on('done', (function(_this) {
        return function(root) {
          if (opts.done) {
            return opts.done(new _this(root));
          }
        };
      })(this));
      return n;
    };


    /**
     * Exposes an API to manage your roots project templates through sprout.
     * See api/template for details.
     */

    Roots.template = require('./api/template');


    /**
     * Compiles a roots project. Wow.
     * 
     * @return {Promise} promise for finished compile
     */

    Roots.prototype.compile = function() {
      return (new Compile(this)).exec();
    };


    /**
     * Watches a folder for changes and compiles whenever changes happen.
     * 
     * @return {Object} [chokidar](https://github.com/paulmillr/chokidar) instance
     */

    Roots.prototype.watch = function() {
      return (new Watch(this)).exec();
    };


    /**
     * If an irrecoverable error has occurred, exit the application with
     * as clear an error as possible and a specific exit code.
     *
     * @param {Integer} code - numeric error code
     * @param {String} details - any additional details to be printed
     */

    Roots.prototype.bail = function(code, message, ext) {
      var RootsError, name;
      switch (code) {
        case 125:
          name = "Malformed Extension";
          break;
        case 126:
          name = "Malformed Write Hook Output";
      }
      console.error("\nFLAGRANT ERROR!\n".red.bold);
      console.error("It looks like there was a " + ("" + name).bold + " Error.");
      console.error("Check out " + ("http://roots.cx/errors#" + code).green + " for more help\n");
      console.error("Reason:".yellow.bold);
      console.error(message);
      console.error("\nOffending Extension:".yellow.bold);
      console.error("Name: ".bold + ext.constructor.name);
      process.stderr.write("Extension: ".bold);
      console.error(util.inspect(ext, {
        colors: true,
        showHidden: true
      }));
      process.stderr.write("Prototype: ".bold);
      console.error(ext.constructor.prototype);
      RootsError = (function(_super1) {
        __extends(RootsError, _super1);

        function RootsError(name, message, ext, code) {
          this.name = name;
          this.message = message;
          this.ext = ext;
          this.code = code;
          Error.call(this);
          Error.captureStackTrace(this, this.constructor);
        }

        return RootsError;

      })(Error);
      throw new RootsError(name, message, ext, code);
    };

    return Roots;

  })(EventEmitter);

  module.exports = Roots;

}).call(this);
