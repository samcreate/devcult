// Generated by CoffeeScript 1.7.0
(function() {
  var EventEmitter, New, exec, fs, global_config, nodefn, npm, path, sprout, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  fs = require('fs');

  EventEmitter = require('events').EventEmitter;

  exec = require('child_process').exec;

  nodefn = require('when/node');

  sprout = require('sprout');

  global_config = require('../global_config');

  _ = require('lodash');

  npm = require('npm');


  /**
   * @class New
   * @classdesc Uses sprout to create new roots projects
   */

  New = (function(_super) {
    var has_deps, init, install_deps;

    __extends(New, _super);

    function New(roots) {
      this.roots = roots;
      this.base_url = 'https://github.com/roots-dev/base.git';
    }


    /**
     * Main method, given a path to where the project should be and some (optional)
     * additional options, creates a new project template. If no template is provided,
     * uses the roots default template, which is installed if not present. Once the
     * template is created, installs dependencies if a package.json is present.
     *
     * @param  {Object} opts - Arguments object, takes the following:
     *                       - path: path to nonexistant folder where project should be
     *                       - template: name of the template to use for the project
     *                       - options: overrides for template config
     *                       - defaults: default values for template config
     */

    New.prototype.exec = function(opts) {
      this.path = opts.path || (function() {
        throw new Error('missing path');
      })();
      this.template = opts.template || global_config().get('default_template');
      this.overrides = opts.options || {};
      this.defaults = opts.defaults || {};
      this.pkg = path.join(this.path, 'package.json');
      this.defaults.name = opts.name;
      if (!_.contains(sprout.list(), 'roots-base')) {
        sprout.add({
          name: 'roots-base',
          uri: this.base_url
        })["catch"]((function(_this) {
          return function(err) {
            return _this.emit('error', err);
          };
        })(this)).tap((function(_this) {
          return function() {
            return _this.emit('template:base_added');
          };
        })(this)).then((function(_this) {
          return function() {
            return init.call(_this);
          };
        })(this));
      } else {
        init.call(this);
      }
      return this;
    };


    /**
     * Uses sprout.init to create a project template, emits events, and installs
     * dependencies if necessary.
     * 
     * @private
     */

    init = function() {
      return sprout.init({
        name: this.template,
        path: this.path,
        overrides: this.overrides,
        defaults: this.defaults
      }).tap((function(_this) {
        return function() {
          return _this.emit('template:created');
        };
      })(this)).then((function(_this) {
        return function() {
          if (has_deps.call(_this)) {
            return install_deps.call(_this);
          }
        };
      })(this)).done(((function(_this) {
        return function() {
          return _this.emit('done', _this.path);
        };
      })(this)), ((function(_this) {
        return function(err) {
          return _this.emit('error', err);
        };
      })(this)));
    };


    /**
     * Tests whether a project has a package.json file and therefore needs to have
     * dependencies installed.
     *
     * @private
     * @return {Boolean} whether a package.json file exists in the template
     */

    has_deps = function() {
      return fs.existsSync(this.pkg);
    };


    /**
     * Uses npm to install a project's dependencies.
     *
     * @private
     * @return {Promise} a promise for installed deps
     */

    install_deps = function() {
      this.emit('deps:installing');
      return nodefn.call(npm.load.bind(npm), require(this.pkg)).then((function(_this) {
        return function() {
          return nodefn.call(npm.commands.install, path.dirname(_this.pkg), []);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.emit('deps:finished');
        };
      })(this));
    };

    return New;

  })(EventEmitter);

  module.exports = New;

}).call(this);
